/*

The main interface to the Game Server.
This serves as the mediator between what the browser needs and what the server gives us.

Engine.ts should act as a reliable interface to the game server.
Game.ts shouldn't have to think about connection, reconnection, or authentication logic,
only game logic and processing the events Engine.ts dutifully hands it.

*/

import { v4 as uuid } from "uuid";

import { logger, LogTypes } from "./Logger";
import {
  SpaceUserInfo,
  WireObject,
  Space,
  SpawnPoint,
  Portal,
  Announcer,
  WireArea,
  ServerClientEvent,
  PlayerUpdatesSession,
  EditChatMessage,
} from "@gathertown/gather-game-common/dist/src/public/events";
import {
  convertGameMapV2ToGameMap,
  convertMapObjectToWireObject,
  convertTutorialTasksToWireTutorialTasks,
  EnabledChat,
  GameMap,
  GameMapV2,
  MapObject,
  TutorialTasks,
  WallFloorBlock,
  wallFloorConvertToDB,
} from "@gathertown/gather-game-common/dist/src/public/gameMap";
import {
  GAME_STATE_PLAYER_DISCONNECT_SYMBOL,
  PartialGameState,
} from "@gathertown/gather-game-common/dist/src/public/gameState";
import {
  generateDefaultPlayer,
  MoveDirection,
  Player,
  SpriteDirection,
} from "@gathertown/gather-game-common/dist/src/public/player";
import {
  ServerClientEventByCase,
  ServerClientEventCase,
} from "@gathertown/gather-game-common/dist/src/public/utils";

import { Engine, EngineAuth } from "./Engine";
import { ServerClientEventContext, isBrowser } from "./Utils";
import { MapsAccumulator } from "./MapsAccumulator";
import { defaultSubscriptions } from "./DefaultSubscriptions";
import { GAME_CLIENT_VERSION } from "./version";

export * from "@gathertown/gather-game-common/dist/src/public/events";
export * from "@gathertown/gather-game-common/dist/src/public/factories";
export * from "@gathertown/gather-game-common/dist/src/public/gameMap";
export * from "@gathertown/gather-game-common/dist/src/public/gameState";
export * from "@gathertown/gather-game-common/dist/src/public/player";
export * from "@gathertown/gather-game-common/dist/src/public/position";
export * from "@gathertown/gather-game-common/dist/src/public/responseCodes";
export * from "@gathertown/gather-game-common/dist/src/public/remoteWork";
export * from "@gathertown/gather-game-common/dist/src/public/utils";

// TODO: STOP USING ALL OF THIS ASAP
type GameSpaceSubscription = Readonly<{
  onMap: (id: string, map: GameMap) => void;
}>;

type GameEventSubscriptions<T extends ServerClientEventCase> = {
  [uuid: string]: (data: ServerClientEventByCase<T>, context: ServerClientEventContext) => void;
};

export type GameEventSubscriptionMap = {
  [eventId in ServerClientEventCase]?: GameEventSubscriptions<eventId>;
};

export type GameOptions = { logLevels?: LogTypes; overrideServer?: string };

export class Game {
  // connection
  spaceId?: string;
  engine: Engine;
  connected = false;
  getAuth: () => Promise<EngineAuth>;
  private subscriptionFinishedCallback = () => {
    console.log("Finished subscribing.");
  };
  private subscriptionFailedCallback = (reason: string) => {
    console.error("Failed to subscribe", reason);
  };
  private updateSubscriptionsPromise: Promise<void> | undefined;
  private _initializedAtMs = 0;
  private _connectedAtMs = 0;
  private hasSentMapSinceConnect = false;
  private timeToFirstOnMapsMs: { [mapId: string]: number } = {};
  private _onMapCounts: { [mapId: string]: number } = {};
  private _connectCalledAt = 0;
  private _timeToConnect = -1;

  debugOverrideServer?: string;

  private subscriptions: GameEventSubscriptionMap = {};
  private disconnectHandlers: { [uuid: string]: (code?: number, reason?: string) => void } = {};

  /**
   * @deprecated
   */
  legacySubscriptions: {
    [uuid: string]: GameSpaceSubscription;
  } = {};
  /**
   * @deprecated
   */
  legacySubscriptionsConnection: {
    [uuid: string]: (connected: boolean) => void;
  } = {};

  private eventSubscriptions = {};
  private _encIdMapping: { [encId: number]: string } = {};

  // Player game state
  players: { [uid: string]: Player } = {};

  dispatchGameUpdate?: (delta: PartialGameState<Player>) => void;
  dispatchMapUpdate?: (mapId: string, map: Readonly<GameMapV2>) => void;

  private mapsAccumulator = new MapsAccumulator();

  // Map state. Partials are maps we don't have full data on yet.
  // These fields are both readonly on mapsAccumulator which is why these shortcuts are fine.
  completeMaps: { [id: string]: GameMapV2 } = this.mapsAccumulator.completeMaps;
  partialMaps: { [id: string]: Partial<GameMapV2> } = this.mapsAccumulator.partialMaps;
  lastMapUpdateIds: { [id: string]: number } = this.mapsAccumulator.lastMapUpdateIds;

  onInput: ((dir: MoveDirection, stopped: boolean, inputId: number) => void) | undefined;
  inputId = 1; // server needs this to be uint so its lastInputId inits to 0

  private mapDataChecks = 0;
  private mapDataCheckInterval: NodeJS.Timeout | undefined;
  // this explicit any is chill because we're just printing the result
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  putMetric: (metricName: string, metricValue: any) => void = (_name, _value) => {
    if (isBrowser) {
      logger.error("tried to put metric but no metric function provided");
    }
  };

  debug(debugState = true) {
    logger.setDebugState(debugState);
  }
  /* SETUP */

  // Params
  // ------
  // getAuth
  //   A function that returns an auth token/key that the game client
  //   should use to authenticate itself with the game server.
  // onInput
  //   Callback to be fired whenever moving in the game. Used for Client
  //   Prediction - see ClientPrediction.ts
  constructor(
    spaceId: string | undefined,
    getAuth: () => Promise<EngineAuth>,
    onInput?: (dir: MoveDirection, stopped: boolean, inputId: number) => void,
    dispatchGameUpdate?: (delta: PartialGameState<Player>) => void,
    dispatchMapUpdate?: (mapId: string, map: Readonly<GameMapV2>) => void,
    options?: GameOptions,
  ) {
    if (options?.logLevels) {
      logger.enabled = Object.assign(logger.enabled, options.logLevels);
    }

    this.getAuth = getAuth;
    this.onInput = onInput;
    this.eventSubscriptions = defaultSubscriptions;
    this.dispatchGameUpdate = dispatchGameUpdate;
    this.dispatchMapUpdate = dispatchMapUpdate;

    // this is an unfortunate hack to avoid null checking the engine everywhere
    // we're using this.spaceId === undefined to tell whether things have been initialized or not,
    // and don't want to check both everywhere.
    // And besides, we'd just throw an error if it's undefined, and that's what'll happen anyways now.
    // We could avoid this if only spaceId were definied when we call the constructor...
    // Lint warning auto-ignored when enabling the consistent-type-assertions rule. no-explicit-any is also auto-ignored b/c these 2 rules often apply on the same line.
    // You should almost never be using type assertions! TODO: @ENG-4304 Remove these comments and the type assertion next time this code is edited.
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/no-explicit-any
    this.engine = undefined as unknown as Engine;
    if (spaceId) {
      // see comment below
      this.init(spaceId, options?.overrideServer);
    }
  }
  // the only reason we have this is because the browser wants to create
  // the game once at the beginning and share it globally,
  // even though we may not know the spaceId at that point.
  // Seemed easier at the time to do null checks on spaceId here instead of
  // null checks on the game everywhere else
  init(spaceId: string, _overrideServer?: string) {
    // people keep tripping over this, so whatever, we can just make sure
    this.spaceId = spaceId.substring(0, 16) + "\\" + spaceId.substring(17);

    let overrideServer: string | undefined;
    // for local development, force us to use localhost as our server
    if (isBrowser && window.location.hostname === "localhost") {
      overrideServer = "ws://" + window.location.host + "/__dev-websocket";
    }
    if (_overrideServer) {
      overrideServer = _overrideServer;
    }

    this.engine = new Engine(this.spaceId, this.getAuth, overrideServer);
    this._initializedAtMs = Date.now();
    this._setupEngineCallbacks();
  }

  _setupEngineCallbacks() {
    this.engine.onmetric = (metricName: string, additionalData: string) => {
      this.putMetric(metricName, additionalData);
    };
    this.engine.onevent = (serverClientEvent: ServerClientEvent) => {
      const { event } = serverClientEvent;
      if (!event) {
        logger.error("Nullish server client event; this shouldn't happen! " + serverClientEvent);
        return;
      }
      logger.debug(serverClientEvent);
      // The context that is specific
      const context: ServerClientEventContext = {
        spaceId: this.spaceId ?? "", // this is just to make ts happy. we wouldn't connect the engine without a known spaceId
      };
      const playerDeltas: PartialGameState<Player> = {};
      // we need to track this because some other code depends on the first delta being emitted actually having the full player data. fml
      switch (event.$case) {
        // These events mutate the player state in a way that does not send a declarative change in state (e.g deleting something).
        // You can *usually* write your code in a way that it does not demand one of these, but if you need it, you can implement it here.
        case "playerJoins": {
          const { encId } = event.playerJoins;
          const uid = this._encIdMapping[encId];
          // Initialize local state for this player if we never have before.
          // @ts-expect-error Error auto-ignored when enabling TS noUncheckedIndexedAccess. If you're already touching this code, please clean this up while you're at it.
          // TODO: @ENG-4257 Clean these up! See the linear task for more context and advice for cleaning up.
          if (!this.players[uid]) {
            const player = generateDefaultPlayer();
            // @ts-expect-error Error auto-ignored when enabling TS noUncheckedIndexedAccess. If you're already touching this code, please clean this up while you're at it.
            // TODO: @ENG-4257 Clean these up! See the linear task for more context and advice for cleaning up.
            this.players[uid] = player;
            // @ts-expect-error Error auto-ignored when enabling TS noUncheckedIndexedAccess. If you're already touching this code, please clean this up while you're at it.
            // TODO: @ENG-4257 Clean these up! See the linear task for more context and advice for cleaning up.
            playerDeltas[uid] = { ...player }; // defensive copy since we're passing this to clients
          }
          break;
        }
        case "playerExits": {
          const { encId } = event.playerExits;
          const uid = this._encIdMapping[encId];
          // @ts-expect-error Error auto-ignored when enabling TS noUncheckedIndexedAccess. If you're already touching this code, please clean this up while you're at it.
          // TODO: @ENG-4257 Clean these up! See the linear task for more context and advice for cleaning up.
          playerDeltas[uid] = GAME_STATE_PLAYER_DISCONNECT_SYMBOL;
          // @ts-expect-error Error auto-ignored when enabling TS noUncheckedIndexedAccess. If you're already touching this code, please clean this up while you're at it.
          // TODO: @ENG-4257 Clean these up! See the linear task for more context and advice for cleaning up.
          context.player = this.players[uid];
          // @ts-expect-error Error auto-ignored when enabling TS noUncheckedIndexedAccess. If you're already touching this code, please clean this up while you're at it.
          // TODO: @ENG-4257 Clean these up! See the linear task for more context and advice for cleaning up.
          delete this.players[uid];
          break;
        }
        case "playerLeavesWhisper": {
          const { encId } = event.playerLeavesWhisper;
          const uid = this._encIdMapping[encId];
          // @ts-expect-error Error auto-ignored when enabling TS noUncheckedIndexedAccess. If you're already touching this code, please clean this up while you're at it.
          // TODO: @ENG-4257 Clean these up! See the linear task for more context and advice for cleaning up.
          playerDeltas[uid] = { whisperId: "" };
          // @ts-expect-error Error auto-ignored when enabling TS noUncheckedIndexedAccess. If you're already touching this code, please clean this up while you're at it.
          // TODO: @ENG-4257 Clean these up! See the linear task for more context and advice for cleaning up.
          const player = this.players[uid];
          if (!player) {
            // This should never happen - playerJoins, which inits this.players[uid], must be the first event about any player.
            logger.error("Dropping a playerLeavesWhisper event received before a playerJoins!");
            break;
          }
          player.whisperId = "";
          break;
        }
        case "spaceSetsIdMapping": {
          const { uid, encId } = event.spaceSetsIdMapping;
          this._encIdMapping[encId] = uid;
          break;
        }
        case "playerChats": {
          const { senderId } = event.playerChats;
          context.player = this.players[senderId];
          break;
        }
        case "playerNotifies": {
          const { encId } = event.playerNotifies;
          const uid = this._encIdMapping[encId];
          // @ts-expect-error Error auto-ignored when enabling TS noUncheckedIndexedAccess. If you're already touching this code, please clean this up while you're at it.
          // TODO: @ENG-4257 Clean these up! See the linear task for more context and advice for cleaning up.
          context.player = this.players[uid];
          break;
        }
        // don't want the default to catch these and change player fields
        case "playerSetsImagePointer":
        case "playerInteracts":
        case "customEvent":
        case "ready":
        case "serverHeartbeat":
        case "info":
        case "warn":
        case "error":
        case "transactionStatus":
          break;
        default: {
          // This processes any event that begins with player, pulls out the encId (and optionally, additionally, encIdTarget if you need to target a second user as well)
          // and applies all remaining fields to the player's state. If your event has special processing that needs to happen elsewhere, you can still put it in
          // the switch statement. Otherwise, it will be handled automatically here.
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          // Lint warning auto-ignored when enabling the consistent-type-assertions rule. no-explicit-any is also auto-ignored b/c these 2 rules often apply on the same line.
          // You should almost never be using type assertions! TODO: @ENG-4304 Remove these comments and the type assertion next time this code is edited.
          // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/no-explicit-any
          const eventAny = event as any; // temporarily cast so we can get at the event
          const eventVal = eventAny[eventAny.$case];
          const encId = eventVal?.encId;
          if (event.$case.startsWith("map")) {
            const completedMap = this.mapsAccumulator.addChunk(event);
            if (!completedMap) {
              break;
            }

            // We're purposefully not defensive copying this right now - it's left up to clients of GGC to
            // defensive copy if they want or just work with this in mind.
            this.dispatchMapUpdate?.(completedMap.id, completedMap);

            if (!this.hasSentMapSinceConnect) {
              this.hasSentMapSinceConnect = true;
              logger.checkpoint(
                `gt: ${Date.now() - this._connectedAtMs} : doing first onmap since connect`,
              );
            }
            Object.values(this.legacySubscriptions ?? {}).forEach((f) => {
              if (!this.timeToFirstOnMapsMs[completedMap.id]) {
                this.timeToFirstOnMapsMs[completedMap.id] = Date.now() - this._connectedAtMs;
                this.putMetric("time-to-first-map-data-ms", {
                  mapId: completedMap.id,
                  timeToMapDataMs: this.timeToFirstOnMapsMs[completedMap.id],
                });
                this.mapDataCheckInterval && clearInterval(this.mapDataCheckInterval);
              }
              if (!this._onMapCounts[completedMap.id]) {
                this._onMapCounts[completedMap.id] = 0;
              }
              this._onMapCounts[completedMap.id] += 1;
              f.onMap(completedMap.id, convertGameMapV2ToGameMap(completedMap));
            });
          } else if (event.$case.startsWith("player") && encId != null) {
            // TODO: scrub out fields set to undefined, or they'll overwrite that field on the player object. JS sucks :(
            const uids = [];
            const fetchedUid = this._encIdMapping[encId];
            if (fetchedUid != null) {
              uids.push(fetchedUid);
            } else {
              // note: if you change this log, update the dashboard. we track it
              logger.error(`missing encId ${encId} for event: ${eventAny.$case}`);
            }
            if (eventVal?.encIdTarget) {
              const uidTarget = this._encIdMapping[eventVal?.encIdTarget];
              if (uidTarget != null) {
                uids.push(uidTarget);
              } else {
                logger.error(
                  `missing encTargetId: ${eventVal?.encIdTarget} in event: ${eventAny.$case}`,
                );
              }
            }

            for (const entry in eventVal) {
              for (const uid of uids) {
                if (entry === "encId" || entry === "encIdTarget" || eventVal[entry] === undefined) {
                  continue;
                }
                const player = this.players[uid];
                if (!player) {
                  // This should never happen - playerJoins, which inits this.players[uid], must be the first event about any player.
                  logger.error(`Dropping a ${event.$case} event received before a playerJoins!`);
                  continue;
                }
                if (!playerDeltas[uid]) {
                  playerDeltas[uid] = {};
                }
                // We need to weaken the type here to index the Player type with an arbitrary string (that we know should be fine).
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                // Lint warning auto-ignored when enabling the consistent-type-assertions rule. no-explicit-any is also auto-ignored b/c these 2 rules often apply on the same line.
                // You should almost never be using type assertions! TODO: @ENG-4304 Remove these comments and the type assertion next time this code is edited.
                // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/no-explicit-any
                const playerRecord = player as Record<string, any>;
                // Same reasoning as above.
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                // Lint warning auto-ignored when enabling the consistent-type-assertions rule. no-explicit-any is also auto-ignored b/c these 2 rules often apply on the same line.
                // You should almost never be using type assertions! TODO: @ENG-4304 Remove these comments and the type assertion next time this code is edited.
                // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/no-explicit-any
                const playerDeltaRecord = playerDeltas[uid] as Record<string, any>;

                if (entry === "mapId") {
                  // TODO: Player struct has an inconsistency, it expects map to be named mapId
                  // rename Player struct from map to mapId, or rename proto contents from mapId to map
                  playerDeltaRecord["map"] = eventVal[entry];
                  player.map = eventVal[entry];
                } else {
                  playerRecord[entry] = eventVal[entry];
                  playerDeltaRecord[entry] = eventVal[entry];
                }
              }
            }
          }
        }
      }

      // This needs to happen before the subscription forwarding below so we can guarantee that client game states are
      // updated before event handlers run.
      this.dispatchGameUpdate?.(playerDeltas);

      // SUBSCRIPTION FORWARDING
      // We know what we're doing here, so it's fine+necessary to cast to any. Be careful doing this in general though!
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      // Lint warning auto-ignored when enabling the consistent-type-assertions rule. no-explicit-any is also auto-ignored b/c these 2 rules often apply on the same line.
      // You should almost never be using type assertions! TODO: @ENG-4304 Remove these comments and the type assertion next time this code is edited.
      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/no-explicit-any
      const eventAny = (event as any)[event.$case];
      if (eventAny["encId"]) {
        const { encId } = eventAny;
        const uid = this._encIdMapping[encId];
        // don't override player if already set by handler above
        // @ts-expect-error Error auto-ignored when enabling TS noUncheckedIndexedAccess. If you're already touching this code, please clean this up while you're at it.
        // TODO: @ENG-4257 Clean these up! See the linear task for more context and advice for cleaning up.
        context.player = context.player || this.players[uid];
        context.playerId = uid;
      }
      if (eventAny["encIdTarget"]) {
        const { encIdTarget } = eventAny;
        const uidTarget = this._encIdMapping[encIdTarget];
        // @ts-expect-error Error auto-ignored when enabling TS noUncheckedIndexedAccess. If you're already touching this code, please clean this up while you're at it.
        // TODO: @ENG-4257 Clean these up! See the linear task for more context and advice for cleaning up.
        context.target = this.players[uidTarget];
        context.targetId = uidTarget;
      }
      if (eventAny["mapId"]) {
        const { mapId } = eventAny;
        context.map = this.partialMaps[mapId];
      }
      this.publishEvent(event.$case, event, context);
    };

    this.engine.onconnect = () => {
      this._connectedAtMs = Date.now();
      this._timeToConnect = this._connectedAtMs - this._connectCalledAt;
      this.hasSentMapSinceConnect = false;
      this._startMapDataCheckInterval();
      this.subscribeToAll();
      Object.values(this.legacySubscriptionsConnection).forEach((f) => {
        f(true);
      });
    };
    this.engine.ondisconnect = (code?: number, reason?: string) => {
      // call old "connected? yes/no" handlers
      Object.values(this.legacySubscriptionsConnection).forEach((f) => {
        f(false);
      });

      // call new disconnect handlers
      for (const id in this.disconnectHandlers) {
        const handler = this.disconnectHandlers[id];
        // @ts-expect-error Error auto-ignored when enabling TS noUncheckedIndexedAccess. If you're already touching this code, please clean this up while you're at it.
        // TODO: @ENG-4257 Clean these up! See the linear task for more context and advice for cleaning up.
        handler(code, reason);
      }
    };
  }

  /**
   * Call this once when connecting to a space.
   */
  connect() {
    if (!this.spaceId) {
      throw new Error("didn't initialize Game properly, no spaceId known");
    }
    if (this.connected) {
      return;
    }
    this.connected = true;
    this._connectCalledAt = Date.now();
    logger.log("connecting to " + this.spaceId);
    // we also init it inline up top, but this makes sure we get a fresh promise
    this.updateSubscriptionsPromise = new Promise((res, rej) => {
      this.subscriptionFinishedCallback = res;
      this.subscriptionFailedCallback = rej;
    });
    return this.engine.start();
  }

  /**
   * @returns a Promise that resolves when initialization is finished. Rejects if you attempt to wait before init-ing.
   */
  async waitForInit() {
    if (!this.updateSubscriptionsPromise) {
      throw new Error(
        "Waiting for init before connect() called. Call connect() before awaiting init.",
      );
    }
    return await this.updateSubscriptionsPromise;
  }

  disconnect() {
    logger.log("Disconnecting");
    if (this.engine) {
      logger.checkpoint("stopping engine in Game disconnect");
      this.engine.stop();
      this.connected = false;
    } else {
      logger.warn(
        "Destroying an engine that wasn't created in the first place. Was this space real?",
      );
    }
  }

  getPlayer(uid: string) {
    return this.players[uid];
  }

  // Publishes an event to all subscribers for that event.
  // This is intentionally a _public_ method, because clients may want to fake events (e.g for
  // stuff like NPCs).
  publishEvent<T extends ServerClientEventCase>(
    eventId: T,
    data: ServerClientEventByCase<T>,
    context: ServerClientEventContext,
  ) {
    const subMap = this.subscriptions[eventId];
    let errors: Error[] | undefined;
    for (const id in subMap) {
      const handler = subMap[id];
      // It would be nice to not need to independently try/catch every one of these, but the reality is that with
      // so many surfaces registering subscriptions here it's far too common to have one subscription error out
      // and prevent all remaining subs from running.
      try {
        // @ts-expect-error See comments in subscribeToEvent() explaining why TS has problems with this.
        // We know this should be correct, but we still need to be careful here without the protection of TS.
        handler(data, context);
      } catch (e) {
        // Lazily allocate the errors array to minimize garbage collection.
        if (!errors) {
          errors = [];
        }
        // @ts-expect-error Error auto-ignored when enabling useUnknownInCatchVariables. It's possible this is incorrect.
        // TODO: @ENG-4157 Clean these up! If you're already touching this code, please clean this up while you're at it.
        errors.push(e);
      }
    }
    if (errors && errors.length > 0) {
      logger.error(
        `${errors.length} errors occurred in subscription handlers for event ${eventId}! See verbose log for more.`,
      );
      logger.debug(...errors.map((e) => e.stack));
      throw errors;
    }
  }

  /* SUBSCRIPTION MANAGEMENT */

  subscribeToEvent<T extends ServerClientEventCase>(
    // `eventId` should ALWAYS be a hardcoded string like "eventName"! See more context below.
    eventId: T,
    handler: (data: ServerClientEventByCase<T>, context: ServerClientEventContext) => void,
  ) {
    const subscriptionId = uuid();

    // Having to hard cast these types isn't great and is related to the limitation described below.
    // Lint warning auto-ignored when enabling the consistent-type-assertions rule. no-explicit-any is also auto-ignored b/c these 2 rules often apply on the same line.
    // You should almost never be using type assertions! TODO: @ENG-4304 Remove these comments and the type assertion next time this code is edited.
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/no-explicit-any
    const existingSubs = this.subscriptions[eventId] as GameEventSubscriptionMap[T] | undefined;
    // Lint warning auto-ignored when enabling the consistent-type-assertions rule. no-explicit-any is also auto-ignored b/c these 2 rules often apply on the same line.
    // You should almost never be using type assertions! TODO: @ENG-4304 Remove these comments and the type assertion next time this code is edited.
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/no-explicit-any
    const eventSubs = existingSubs ?? ({} as GameEventSubscriptionMap[T]);
    // @ts-ignore TS doesn't like this because we have the limitation of not being able to specify that
    // eventId will always be a *single* type from the ServerClientEventCase union. Given that we know this
    // API won't ever be used in situations where <T> has more than one possible value, we can just weaken
    // typing a bit here to get around this limitation.
    eventSubs[subscriptionId] = handler;
    this.subscriptions[eventId] = eventSubs;
    return () => {
      delete this.subscriptions[eventId]?.[subscriptionId];
    };
  }

  // old version, DO NOT USE
  // @ts-expect-error Error auto-ignored when migrating tsconfigs to extend tsconfig.base.json. TODO: @ENG-4320 Clean this up the next time this code is touched!
  subscribeToSpace(space: string, listeners: GameSpaceSubscription) {
    // send subscribe message, store the subscription
    const handle = uuid();
    if (!this.legacySubscriptions) {
      this.legacySubscriptions = {};
      this.subscribeToAll();
    }
    this.legacySubscriptions[handle] = listeners;
    // return unsubscribe
    return () => {
      delete this.legacySubscriptions[handle];
      if (Object.keys(this.legacySubscriptions).length === 0) {
        this.legacySubscriptions = {};
        // we no longer want to unsubscribe here, because if we did, we might disconnect the parallel subscribeToEvent handlers
        // eventually, this entire function will go away, so it's okay if some random events are just fired into the aether for now
      }
    };
  }
  subscribeToConnection(callback: (connected: boolean) => void): () => void {
    const handle = uuid();
    this.legacySubscriptionsConnection[handle] = callback;
    return () => {
      delete this.legacySubscriptionsConnection[handle];
    };
  }
  subscribeToDisconnection(callback: (code?: number, reason?: string) => void): () => void {
    const handle = uuid();
    this.disconnectHandlers[handle] = callback;
    return () => {
      delete this.disconnectHandlers[handle];
    };
  }

  /* TAKE ACTIONS */

  enter(info: SpaceUserInfo, spawnToken?: string, targetId?: string) {
    this.engine.queueOrExecuteEnter(info, spawnToken, targetId);
  }
  // enter and exit are special cases of game logic that the Engine has to worry about,
  // since the Engine is supposed to provide the abstraction of a continuous connection,
  // but you need to re-enter each time to connect.
  exit() {
    this.engine.exit();
  }
  respawn() {
    this.engine?.sendAction({
      $case: "respawn",
      respawn: {},
    });
  }
  spawn(spawnToken: string) {
    this.engine.sendAction({
      $case: "spawn",
      spawn: {
        spawnToken,
      },
    });
  }
  move(dir: MoveDirection, stopped = false, targetId?: string) {
    const inputId = this.inputId++;
    this.onInput?.(dir, stopped, inputId);
    this.engine.sendAction({
      $case: "move",
      move: {
        dir,
        stopped,
        inputId,
        targetId,
      },
    });
  }

  /**
   * Utility function for map developers that plays a sound file on the client, once. Use targetId if you are a space owner to play a sound on another client.
   * If no sound is specified, it plays for the entire space. You must be a space owner to play a sound on the whole space.
   * @param src HTMl5 compliant audio resource, e.g a URL to a mp3
   * @param volume scalar volume from 0 to 1.0
   * @param targetId id of another player you want to play the sound on
   */
  playSound(src: string, volume: number, targetId?: string) {
    this.engine.sendAction({
      $case: "playSound",
      playSound: {
        src,
        volume,
        targetId,
      },
    });
  }
  /**
    Puts the currently connected client in ghost mode
    @param space you must be connected already to invoke this function
    @param ghost ghost value, either 1 or 0; whether you are ghosting or not.
    @param targetId id of player whose ghost value you want to set (must be space owner to set)
  */
  ghost(ghost: number, targetId?: string) {
    this.engine.sendAction({
      $case: "ghost",
      ghost: {
        ghost,
        targetId,
      },
    });
  }
  /**
   *
   * @param space string - space - you must be connected already to invoke this function
   * @param recipientId player ID of the other
   * @param dir MoveDirection enum
   */
  enterWhisper(recipientId: string, dir: MoveDirection) {
    this.engine.sendAction({
      $case: "enterWhisper",
      enterWhisper: {
        recipientId,
        dir,
      },
    });
  }
  leaveWhisper() {
    this.engine.sendAction({
      $case: "leaveWhisper",
      leaveWhisper: {},
    });
  }

  teleport(
    mapId: string,
    x: number,
    y: number,
    targetId?: string,
    direction = SpriteDirection.Down,
  ) {
    this.engine.sendAction({
      $case: "teleport",
      teleport: {
        mapId,
        x,
        y,
        direction,
        targetId,
      },
    });
  }
  ring(user: string) {
    this.engine.sendAction({
      $case: "ring",
      ring: {
        user,
      },
    });
  }
  block(blockedUserId: string, blocked: boolean) {
    this.engine.sendAction({
      $case: "block",
      block: {
        blockedUserId,
        blocked,
      },
    });
  }
  pointer(objectId: string, x: number, y: number) {
    this.engine.sendAction({
      $case: "setImagePointer",
      setImagePointer: {
        objectId,
        x,
        y,
      },
    });
  }
  screenPointer(screenId: string, x: number, y: number) {
    this.engine.sendAction({
      $case: "setScreenPointer",
      setScreenPointer: {
        screenId,
        x,
        y,
      },
    });
  }
  setActivelySpeaking(activelySpeaking: boolean) {
    this.engine.sendAction({
      $case: "activelySpeaking",
      activelySpeaking: {
        activelySpeaking,
      },
    });
  }
  setEmote(emote: string | undefined, targetId?: string) {
    this.engine.sendAction({
      $case: "setEmoteV2",
      setEmoteV2: {
        emote,
        targetId,
      },
    });
  }
  setOpenToConversation(openToConversation: boolean, targetId?: string) {
    this.engine.sendAction({
      $case: "setOpenToConversation",
      setOpenToConversation: {
        openToConversation,
        targetId,
      },
    });
  }
  setWorkCondition(workCondition: boolean, targetId?: string) {
    this.engine.sendAction({
      $case: "setWorkCondition",
      setWorkCondition: {
        workCondition,
        targetId,
      },
    });
  }
  setName(name: string, targetId?: string) {
    this.engine.sendAction({
      $case: "setName",
      setName: {
        name,
        targetId,
      },
    });
  }
  setIsMobile(isMobile: boolean) {
    this.engine.sendAction({
      $case: "setIsMobile",
      setIsMobile: {
        isMobile,
      },
    });
  }
  setTextStatus(textStatus: string, targetId?: string) {
    this.engine.sendAction({
      $case: "setTextStatus",
      setTextStatus: {
        textStatus,
        targetId,
      },
    });
  }
  setEmojiStatus(emojiStatus: string, targetId?: string) {
    this.engine.sendAction({
      $case: "setEmojiStatus",
      setEmojiStatus: {
        emojiStatus,
        targetId,
      },
    });
  }
  setAffiliation(affiliation: string, targetId?: string) {
    this.engine.sendAction({
      $case: "setAffiliation",
      setAffiliation: {
        affiliation,
        targetId,
      },
    });
  }
  setStatus(status: boolean, targetId?: string) {
    this.engine.sendAction({
      $case: "setStatus",
      setStatus: {
        status,
        targetId,
      },
    });
  }
  setEventStatus(eventStatus: string, targetId?: string) {
    this.engine.sendAction({
      $case: "setEventStatus",
      setEventStatus: {
        eventStatus,
        targetId,
      },
    });
  }
  setInConversation(inConversation: boolean, targetId?: string) {
    this.engine.sendAction({
      $case: "setInConversation",
      setInConversation: {
        inConversation,
        targetId,
      },
    });
  }
  setCurrentDesk(currentDesk: string, targetId?: string) {
    this.engine.sendAction({
      $case: "setCurrentDesk",
      setCurrentDesk: {
        currentDesk,
        targetId,
      },
    });
  }
  setCurrentArea(currentArea: string, targetId?: string) {
    this.engine.sendAction({
      $case: "setCurrentArea",
      setCurrentArea: {
        currentArea,
        targetId,
      },
    });
  }
  setOutfitString(outfitString: string, targetId?: string) {
    this.engine?.sendAction({
      $case: "setOutfitString",
      setOutfitString: {
        outfitString,
        targetId,
      },
    });
  }

  clearItem(targetId?: string) {
    this.engine?.sendAction({
      $case: "setItemString",
      setItemString: {
        itemString: "",
        targetId,
      },
    });
  }
  setItem(itemId: string, itemImage: string, targetId?: string) {
    const itemString = itemId
      ? JSON.stringify({
          id: itemId,
          image: itemImage,
        })
      : "";
    this.engine?.sendAction({
      $case: "setItemString",
      setItemString: {
        itemString,
        targetId,
      },
    });
  }
  triggerItem(closestObject?: string, closestObjectTemplate?: string, targetId?: string) {
    this.engine?.sendAction({
      $case: "triggerItem",
      triggerItem: {
        closestObject,
        closestObjectTemplate,
        targetId,
      },
    });
  }
  setSpotlight(user: string, spotlighted: boolean) {
    this.engine.sendAction({
      $case: "spotlight",
      spotlight: {
        spotlightedUser: user,
        isSpotlighted: spotlighted,
      },
    });
  }
  banPlayer(user: string) {
    this.engine.sendAction({
      $case: "ban",
      ban: {
        user,
      },
    });
  }
  kickPlayer(user: string) {
    this.engine.sendAction({
      $case: "kick",
      kick: {
        user,
      },
    });
  }
  // this really can be anything. maybe suboptimal :P but it's at least intentional
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  interact(objId: string, data?: any) {
    this.engine.sendAction({
      $case: "interact",
      interact: {
        objId,
        dataJson: JSON.stringify(data),
      },
    });
  }
  chat(
    chatRecipient: string,
    localPlayers: string[],
    mapId: string,
    data: { id?: string; contents: string },
  ) {
    this.engine.sendAction({
      $case: "chat",
      chat: {
        chatRecipient,
        localPlayerIds: localPlayers,
        mapId,
        ...data,
      },
    });
  }
  editChatMessage(message: EditChatMessage) {
    this.engine.sendAction({
      $case: "editChatMessage",
      editChatMessage: message,
    });
  }
  notify(notification: string) {
    this.engine.sendAction({
      $case: "notify",
      notify: {
        notification,
      },
    });
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  shootConfetti(targetId?: string) {
    this.engine?.sendAction({
      $case: "shootConfetti",
      shootConfetti: {
        targetId,
      },
    });
  }
  setGoKartId(goKartId: string, targetId?: string) {
    this.engine?.sendAction({
      $case: "setGoKartId",
      setGoKartId: {
        goKartId,
        targetId,
      },
    });
  }

  setIsAlone(isAlone: boolean, targetId?: string) {
    this.engine?.sendAction({
      $case: "setIsAlone",
      setIsAlone: {
        isAlone,
        targetId,
      },
    });
  }

  setFocusModeEndTime(focusModeEndTime: string, targetId?: string) {
    this.engine?.sendAction({
      $case: "setFocusModeEndTime",
      setFocusModeEndTime: {
        focusModeEndTime,
        targetId,
      },
    });
  }

  setFollowTarget(followTarget: string) {
    this.engine?.sendAction({
      $case: "setFollowTarget",
      setFollowTarget: {
        followTarget,
      },
    });
  }

  enterPortal(targetUrl: string, targetId?: string, bypassPrompt?: boolean) {
    this.engine?.sendAction({
      $case: "enterPortal",
      enterPortal: {
        targetUrl,
        targetId,
        bypassPrompt,
      },
    });
  }

  /* EDITOR ONLY ACTIONS */
  setMapDimensions(mapId: string, width: number, height: number) {
    this.engine?.sendAction({
      $case: "mapSetDimensions",
      mapSetDimensions: {
        mapId,
        width,
        height,
      },
    });
  }

  setMapCollisions(mapId: string, x: number, y: number, w: number, h: number, mask: string) {
    this.engine?.sendAction({
      $case: "mapSetCollisions",
      mapSetCollisions: {
        mapId,
        x,
        y,
        w,
        h,
        mask,
      },
    });
  }

  setMapBackgroundImagePath(mapId: string, backgroundImagePath: string) {
    this.engine?.sendAction({
      $case: "mapSetBackgroundImagePath",
      mapSetBackgroundImagePath: {
        mapId,
        backgroundImagePath,
      },
    });
  }

  setMapForegroundImagePath(mapId: string, foregroundImagePath: string) {
    this.engine?.sendAction({
      $case: "mapSetForegroundImagePath",
      mapSetForegroundImagePath: {
        mapId,
        foregroundImagePath,
      },
    });
  }

  setMapSprites(mapId: string, sprites: number[]) {
    this.engine?.sendAction({
      $case: "mapSetSprites",
      mapSetSprites: {
        mapId,
        sprites,
      },
    });
  }

  setMapSpawns(mapId: string, spawns: SpawnPoint[]) {
    this.engine?.sendAction({
      $case: "mapSetSpawns",
      mapSetSpawns: {
        mapId,
        spawns,
      },
    });
  }

  setMapSpaces(mapId: string, spaces: Space[]) {
    this.engine?.sendAction({
      $case: "mapSetSpaces",
      mapSetSpaces: {
        mapId,
        spaces,
      },
    });
  }

  setMapPortals(mapId: string, portals: Portal[]) {
    this.engine?.sendAction({
      $case: "mapSetPortals",
      mapSetPortals: {
        mapId,
        portals,
      },
    });
  }

  setMapAnnouncer(mapId: string, announcer: Announcer[]) {
    this.engine?.sendAction({
      $case: "mapSetAnnouncer",
      mapSetAnnouncer: {
        mapId,
        announcer,
      },
    });
  }

  setMapObjects(
    mapId: string,
    objects: { [key: number]: Partial<MapObject> },
    updatesAreOverwrites?: boolean,
  ) {
    const wireObjects: { [key: number]: WireObject } = {};
    Object.keys(objects).reduce((wireObjects, keyString) => {
      const key = parseInt(keyString);
      // @ts-expect-error Error auto-ignored when enabling TS noUncheckedIndexedAccess. If you're already touching this code, please clean this up while you're at it.
      // TODO: @ENG-4257 Clean these up! See the linear task for more context and advice for cleaning up.
      wireObjects[key] = convertMapObjectToWireObject(objects[key]);
      return wireObjects;
    }, wireObjects);
    this.engine?.sendAction({
      $case: "mapSetObjects",
      mapSetObjects: {
        mapId,
        objects: wireObjects,
        updatesAreOverwrites,
      },
    });
  }

  /**
   * Animates an object moving from its current position to `targetWorldPos`.
   * Also handles setting the object's new position in the map itself.
   */
  moveMapObject(
    mapId: string,
    objectId: string,
    targetWorldPos: { x: number; y: number; xOffset?: number; yOffset?: number },
    durationMs: number,
    easing: "Linear" | "Cubic" | "Elastic" | "Bounce" | "Back" = "Linear",
  ) {
    this.engine?.sendAction({
      $case: "mapMoveObject",
      mapMoveObject: {
        mapId,
        objectId,
        targetX: targetWorldPos.x,
        targetY: targetWorldPos.y,
        targetXOffset: targetWorldPos.xOffset || 0,
        targetYOffset: targetWorldPos.yOffset || 0,
        duration: durationMs,
        easing,
      },
    });
  }

  setMapName(mapId: string, name: string) {
    this.engine?.sendAction({
      $case: "mapSetName",
      mapSetName: {
        mapId,
        name,
      },
    });
  }

  setMapMuteOnEntry(mapId: string, muteOnEntry: boolean) {
    this.engine?.sendAction({
      $case: "mapSetMuteOnEntry",
      mapSetMuteOnEntry: {
        mapId,
        muteOnEntry,
      },
    });
  }

  setMapUseDrawnBG(mapId: string, useDrawnBG: boolean) {
    this.engine?.sendAction({
      $case: "mapSetUseDrawnBG",
      mapSetUseDrawnBG: {
        mapId,
        useDrawnBG,
      },
    });
  }

  setMapWalls(mapId: string, walls: WallFloorBlock[]) {
    const map = this.partialMaps[mapId];
    // @ts-expect-error Error auto-ignored when enabling TS noUncheckedIndexedAccess. If you're already touching this code, please clean this up while you're at it.
    // TODO: @ENG-4257 Clean these up! See the linear task for more context and advice for cleaning up.
    if (!map.dimensions) {
      return;
    }
    // @ts-expect-error Error auto-ignored when enabling TS noUncheckedIndexedAccess. If you're already touching this code, please clean this up while you're at it.
    // TODO: @ENG-4257 Clean these up! See the linear task for more context and advice for cleaning up.
    const wireWalls = wallFloorConvertToDB(walls, map.dimensions);
    this.engine?.sendAction({
      $case: "mapSetWalls",
      mapSetWalls: {
        mapId,
        walls: wireWalls,
      },
    });
  }

  setMapFloors(mapId: string, floors: WallFloorBlock[]) {
    const map = this.partialMaps[mapId];
    // @ts-expect-error Error auto-ignored when enabling TS noUncheckedIndexedAccess. If you're already touching this code, please clean this up while you're at it.
    // TODO: @ENG-4257 Clean these up! See the linear task for more context and advice for cleaning up.
    if (!map.dimensions) {
      return;
    }
    // @ts-expect-error Error auto-ignored when enabling TS noUncheckedIndexedAccess. If you're already touching this code, please clean this up while you're at it.
    // TODO: @ENG-4257 Clean these up! See the linear task for more context and advice for cleaning up.
    const wireFloors = wallFloorConvertToDB(floors, map.dimensions);
    this.engine?.sendAction({
      $case: "mapSetFloors",
      mapSetFloors: {
        mapId,
        floors: wireFloors,
      },
    });
  }

  // Note: This uses the wire type for the area
  setMapAreas(mapId: string, areas: { [areaName: string]: WireArea }) {
    this.engine?.sendAction({
      $case: "mapSetAreas",
      mapSetAreas: {
        mapId,
        areas,
      },
    });
  }

  setMapMiniMapImagePath(mapId: string, miniMapImagePath: string) {
    this.engine?.sendAction({
      $case: "mapSetMiniMapImagePath",
      mapSetMiniMapImagePath: {
        mapId,
        miniMapImagePath,
      },
    });
  }

  setMapEnabledChats(mapId: string, enabledChats: EnabledChat[]) {
    this.engine?.sendAction({
      $case: "mapSetEnabledChats",
      mapSetEnabledChats: {
        mapId,
        enabledChats,
      },
    });
  }

  setMapDescription(mapId: string, description: string) {
    this.engine?.sendAction({
      $case: "mapSetDescription",
      mapSetDescription: {
        mapId,
        description,
      },
    });
  }

  setMapDecoration(mapId: string, decoration: string) {
    this.engine?.sendAction({
      $case: "mapSetDecoration",
      mapSetDecoration: {
        mapId,
        decoration,
      },
    });
  }

  setMapTutorialTasks(mapId: string, tutorialTasks: TutorialTasks) {
    const wireTutorialTasks = convertTutorialTasksToWireTutorialTasks(tutorialTasks);
    this.engine?.sendAction({
      $case: "mapSetTutorialTasks",
      mapSetTutorialTasks: {
        mapId,
        tutorialTasks: wireTutorialTasks,
      },
    });
  }

  setImpassable(mapId: string, x: number, y: number, impassable = true) {
    this.engine.sendAction({
      $case: "setImpassable",
      setImpassable: {
        mapId,
        x,
        y,
        impassable,
      },
    });
  }
  getObject(objId: string, mapId?: string) {
    const mapIds = mapId ? [mapId] : Object.keys(this.completeMaps);
    for (const mapId of mapIds) {
      const objects = this.completeMaps?.[mapId]?.objects;
      if (!objects) {
        continue;
      }
      for (const key in objects) {
        if (objects[key]?.id === objId) {
          return { mapId: mapId, obj: objects[key] };
        }
      }
    }
    return null;
  }
  setObject(mapId: string, objId: string, obj: Partial<MapObject>, useTxnId = false) {
    const currMap = this.completeMaps?.[mapId];
    if (!currMap) {
      throw new Error("mapId not found: " + mapId);
    }
    let key = -1;
    for (const k in currMap.objects ?? {}) {
      if (currMap.objects?.[k]?.id === objId) {
        key = parseInt(k); // idk why ts thinks this can be a string...
        break;
      }
    }
    if (key >= 0) {
      return this.engine.sendAction(
        {
          $case: "mapSetObjects",
          mapSetObjects: {
            mapId,
            objects: {
              [key]: convertMapObjectToWireObject(obj),
            },
          },
        },
        false,
        useTxnId,
      );
    } else {
      return this.engine.sendAction(
        {
          $case: "mapAddObject",
          mapAddObject: {
            mapId,
            object: convertMapObjectToWireObject(obj),
          },
        },
        false,
        useTxnId,
      );
    }
  }
  async deleteObjectByKey(mapId: string, key: number, createTxnId = false) {
    return this.engine.sendAction(
      {
        $case: "mapDeleteObject",
        mapDeleteObject: {
          mapId,
          key,
        },
      },
      false,
      createTxnId,
    );
  }
  async deleteObject(mapId: string, objId: string, createTxnId = false) {
    return this.engine.sendAction(
      {
        $case: "mapDeleteObjectById",
        mapDeleteObjectById: {
          mapId,
          id: objId,
        },
      },
      false,
      createTxnId,
    );
  }

  async requestToLead(target: string, snapshot = "") {
    return this.engine.sendAction({
      $case: "requestToLead",
      requestToLead: {
        target,
        snapshot,
      },
    });
  }

  setManualVideoSrc(manualVideoSrc: string, targetId?: string) {
    return this.engine.sendAction({
      $case: "setManualVideoSrc",
      setManualVideoSrc: {
        manualVideoSrc,
        targetId,
      },
    });
  }

  async setSubtitle(subtitle: string, targetId?: string) {
    return this.engine.sendAction({
      $case: "setSubtitle",
      setSubtitle: {
        subtitle,
        targetId,
      },
    });
  }

  getStats() {
    if (this.engine.clientUid === undefined) {
      logger.error("Client uid is undefined in getStats");
    } else if (this.players[this.engine.clientUid] === undefined) {
      logger.error("Current player is undefined in getStats");
    }
    const metrics = {
      serverURL: this.engine.serverURL,
      engine: this.engine.getMetrics(),
      wsReadyState: this.engine.ws?.readyState,
      timeToConnect: this._timeToConnect,
      timeToFirstOnMapMs: this.timeToFirstOnMapsMs,
      onMapCountsAllTime: this._onMapCounts,
      gameClientAgeMs: Date.now() - this._initializedAtMs,
      numPlayers: Object.keys(this.players).length,
      preferredRegion: this.engine.preferredRegion,
      preferredRegionPing: this.engine.preferredRegionPing,
      currentMap: this.players[this.engine.clientUid || ""]?.map,
      gameClientVersion: GAME_CLIENT_VERSION,
    };
    this.putMetric("get-stats", metrics);
    return metrics;
  }

  // TODO: ABSTRACTION PASTA; this effectively subscribes you to every event. This can go away eventually
  subscribeToAll() {
    this.engine
      .sendAction(
        {
          $case: "updateSubscriptions",
          updateSubscriptions: {
            subscriptions: this.eventSubscriptions,
            mapUpdateIds: this.lastMapUpdateIds,
          },
        },
        false,
        true,
      )
      .then(() => {
        logger.log("Finished subscribing.");
        this.subscriptionFinishedCallback();
      })
      .catch((reason) => {
        this.subscriptionFailedCallback(reason);
      });
  }

  _startMapDataCheckInterval() {
    this.timeToFirstOnMapsMs = {};
    this.mapDataChecks = 0;
    this.mapDataCheckInterval && clearInterval(this.mapDataCheckInterval);
    this.mapDataCheckInterval = setInterval(() => {
      this.mapDataChecks += 1;
      this.putMetric(`still-no-map-data-ms`, {
        gameClientAgeMs: Date.now() - this._initializedAtMs,
        mapDataChecksCount: this.mapDataChecks,
        timeToFirstMapDataMs: this.timeToFirstOnMapsMs,
      });
    }, 2500);
  }

  getDebugHistory() {
    return logger.exportHistory();
  }
  // Util functions

  /**
   * Returns all players that are in the same map as you.
   * @param mapId The string mapId you want to filter on
   * @example game.getPlayersInMap("new office")
   */
  getPlayersInMap(mapId: string) {
    if (!this.completeMaps[mapId]) {
      throw new Error("Can't get players in map: no map for " + mapId);
    }
    const sameMapPlayers = Object.values(this.players).filter((player) => player.map === mapId);
    return sameMapPlayers;
  }

  /**
   * Returns all known maps- i.e the keys of game.partialMaps
   * We add this abstraction for convience and clarity, and because game.partialMaps could be renamed.
   * You should prefer to use this function.
   */
  getKnownPartialMaps() {
    return Object.keys(this.partialMaps);
  }

  /**
   * Returns the keys for all completed maps. See docstring for getKnownPartialMaps().
   */
  getKnownCompletedMaps() {
    return Object.keys(this.completeMaps);
  }

  /**
   * Returns a list of all objects in the map matching a condition.
   * @param mapId The map you want to filter objects on.
   * @param filter A predicate that returns a truthy value if you want the object to be returned.
   * @example game.filterObjectsInMap("park-legacy", (obj) => obj.id.startsWith("password-door")); // finds all password doors in a map
   */
  filterObjectsInMap(mapId: string, filter: (obj: Partial<MapObject>) => boolean) {
    const map = this.partialMaps[mapId];
    // splitting this up for more descriptive error handling and also to make TS happy
    if (!map) {
      throw new Error("Can't filter objects in map: no map for " + mapId);
    }
    if (!map.objects) {
      throw new Error(
        `Can't filter objects in map: haven't gotten objects yet for ${mapId}. Put this in a mapSetsObjects event handler to ensure objects have arrived first.`,
      );
    }
    return Object.values(map.objects).filter(filter);
  }

  /**
   * Returns a list of all players in the space matching a condition.
   * @param filter A predicate that retunrs a truthy value if you want the player to be returned
   * @example filterPlayersInSpace((player) => player.name === "Evelyn"); // returns the Player object for all players named Evelyn
   */
  filterPlayersInSpace(filter: (player: Partial<Player>) => boolean) {
    return Object.values(this.players).filter(filter);
  }
  patchGatherEventsSpaceSession(playerUpdatesSession: PlayerUpdatesSession) {
    this.engine.sendAction({
      $case: "playerUpdatesSession",
      playerUpdatesSession,
    });
  }
  /**
   * Utility function that returns true if a player is standing inside a given private space.
   * Requires the map to be defined first - use game.waitForInit() to be sure it has been defined.
   * You can pass this directly into filterPlayersInSpace using a thunk.
   * @param player A Partial referencing the player
   * @param mapId the map the private tile is in
   * @param privateSpaceId the name of the private space you put in the mapmaker
   * @example isPlayerInPrivateSpace(player, "new office", "library") // returns if a given player is in the library
   * @example filterPlayersInSpace((player) => isPlayerInPrivateSpace(player, "new office", "library")); // finds everyone on that tile
   */
  isPlayerInPrivateSpace = (player: Partial<Player>, mapId: string, privateSpaceId: string) => {
    if (!this.completeMaps[mapId]) {
      throw new Error("mapId invalid or not yet fully defined. Have you waited for init yet?");
    }
    // this extra verbosity is because of the additional typescript rules we've added
    // c'est la vie
    const spaces = this.completeMaps[mapId]?.spaces;
    if (!spaces) {
      return false;
    }

    return !!spaces.some(
      (space) => space.spaceId === privateSpaceId && space.x === player.x && space.y === player.y,
    );
  };
}
