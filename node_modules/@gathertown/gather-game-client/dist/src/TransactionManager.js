"use strict";
exports.__esModule = true;
exports.TransactionManager = void 0;
var TXN_TIMEOUT_LENGTH_MS = 30000;
var Logger_1 = require("./Logger");
var TransactionManager = (function () {
    function TransactionManager() {
        this.pendingTxns = {};
        this.txnTimeouts = {};
    }
    TransactionManager.prototype.addTransaction = function (useLongerTimeout) {
        var _this = this;
        var timeoutLength = useLongerTimeout ? TXN_TIMEOUT_LENGTH_MS * 2 : TXN_TIMEOUT_LENGTH_MS;
        var txnId = this.getRandomTxnId();
        var txnPromise = new Promise(function (res, rej) {
            if (txnId === undefined) {
                return;
            }
            _this.pendingTxns[txnId] = { res: res, rej: rej };
            _this.txnTimeouts[txnId] = setTimeout(function () {
                _this.pendingTxns[txnId].rej("Transaction timed out");
            }, timeoutLength);
        });
        return { txnId: txnId, txnPromise: txnPromise };
    };
    TransactionManager.prototype.rejectTransaction = function (txnId, message) {
        var _a;
        (_a = this.pendingTxns[txnId]) === null || _a === void 0 ? void 0 : _a.rej(message !== null && message !== void 0 ? message : "Transaction was rejected");
        clearTimeout(this.txnTimeouts[txnId]);
        delete this.pendingTxns[txnId];
        delete this.txnTimeouts[txnId];
    };
    TransactionManager.prototype.handleTransactionStatusEvent = function (transactionStatus) {
        var txnId = transactionStatus.txnId, succeeded = transactionStatus.succeeded, reason = transactionStatus.reason;
        if (this.pendingTxns[txnId] === undefined) {
            Logger_1.logger.error("Received a txnId for a non-pending transaction.");
            return;
        }
        if (succeeded) {
            this.pendingTxns[txnId].res(true);
        }
        else {
            this.pendingTxns[txnId].rej("Transaction failed due to error. ".concat(reason !== null && reason !== void 0 ? reason : ""));
        }
        clearTimeout(this.txnTimeouts[txnId]);
        delete this.pendingTxns[txnId];
        delete this.txnTimeouts[txnId];
    };
    TransactionManager.prototype.reset = function () {
        Object.values(this.txnTimeouts).forEach(function (timeout) { return clearTimeout(timeout); });
        Object.values(this.pendingTxns).forEach(function (_a) {
            var rej = _a.rej;
            return rej("Transaction failed due to forced reset, likely because the connection failed");
        });
        this.pendingTxns = {};
        this.txnTimeouts = {};
    };
    TransactionManager.prototype.getRandomTxnId = function () {
        return Math.floor(Math.random() * 4294967295);
    };
    return TransactionManager;
}());
exports.TransactionManager = TransactionManager;
//# sourceMappingURL=TransactionManager.js.map